// Tom Bedford (oldmantom)
// July 26th 2017
// Ants

#include <Arduboy2.h>
Arduboy2 arduboy;

// gamestates
int gamestate = 0;
int gametype = 0;

// resolution
const int screenWidth = 128;
const int screenHeight = 51;

// button press buffers
int bufferA = 0;
int bufferB = 0;
int bufferUp = 0;
int bufferDown = 0;
int bufferLeft = 0;
int bufferRight = 0;

// spawner
const int spawnX = screenWidth;
const int spawnY = screenHeight;

// ants
bool waveGenerated = false;
int waveNumber = 0;
bool antsSpawned = false;
class Ant {
  public:
    int antX;
    int antY;
    int antSize;
    bool alive = false;
};
int currentAnt;
int numberOfAnts;
int antSpeed;
int antSpacing;
Ant Ants[50]; // prepare array of ants (max 50)

// foot
const int footHighPoint = -33; // highest foot can go
const int footLowPoint = -13; // lowest foot can go
const int footWidth = 32;
const int footHeight = 64;

// 1st player
int footX = 20;
int footY = footHighPoint;
bool footRaised;
bool footLowering;
bool footRaising;

// 2nd player
bool twoPlayer;
int p2_footX = 76;
int p2_footY = footHighPoint;
bool p2_footRaised;
bool p2_footLowering;
bool p2_footRaising;

// scoring
int waveAntsCrushed;
int waveAntsLost;
int totalAntsCrushed;
int totalAntsLost;
int p2_totalAntsCrushed;
int p2_totalAntsLost;

// images
const unsigned char titlescreen[] PROGMEM  = {
  0xff, 0xff, 0xff, 0xfe, 0xfc, 0xf8, 0xf0, 0x20, 0x00, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0xc0, 0xc0, 0xe0, 0xf0, 0xf0, 0xf8, 0xf8, 0xf8, 0xf8, 0xf0, 0xe0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xf0, 0xea, 0xf0, 0xfc, 0xff, 0x38, 0x51, 0xf, 0x1, 0x9e, 0xce, 0xe4, 0x68, 0x3c, 0x28, 0x8, 0x70, 0x90, 0xc0, 0x30, 0x30, 0x00, 0x70, 0xb0, 0xd0, 0x60, 0x30, 0x00, 0x18, 0x98, 0xc8, 0xe0, 0x10, 0x4, 0x3c, 0xfe, 0xfe, 0xff, 0xf8, 0x7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xbf, 0xbf, 0xc7, 0xf9, 0xfc, 0xfc, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3, 0x1c, 0xe0, 0x80, 0xc0, 0x60, 0x30, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfd, 0xfd, 0xfe, 0xff, 0xff, 0xff, 0xfc, 0xfd, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0xfc, 0xf8, 0xfc, 0xfe, 0xff, 0xff, 0xfe, 0xfd, 0x7e, 0xbf, 0xbf, 0x9f, 0xdf, 0xee, 0xee, 0xef, 0xf7, 0xf7, 0xf9, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xbf, 0xdf, 0xdf, 0xef, 0xf7, 0x79, 0x3e, 0x1f, 0x1f, 0xf, 0x7, 0x3, 0x1, 0x1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x38, 0x3e, 0x7f, 0x7f, 0x7c, 0x7e, 0xf2, 0xf2, 0xff, 0xef, 0xe7, 0xc0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x18, 0x84, 0x5c, 0xe0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xbf, 0xbf, 0xdf, 0xdf, 0xef, 0xf7, 0xfb, 0xfb, 0xfd, 0xfd, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0xbf, 0xcf, 0xf7, 0x77, 0x3b, 0x3d, 0x1d, 0xe, 0xe, 0x7, 0x3, 0x1, 0x1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x3b, 0x1f, 0xf, 0xff, 0x3f, 0x3f, 0x3f, 0x7f, 0x7c, 0xfc, 0xfc, 0xfc, 0xf8, 0xfe, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfc, 0xff, 0xfe, 0xf0, 0xe0, 0xc0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xbf, 0xdf, 0xdf, 0xef, 0xe7, 0xf7, 0xfb, 0xf9, 0xfd, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xbf, 0xdf, 0xdf, 0x6f, 0x77, 0x3b, 0x1d, 0x1d, 0xe, 0x7, 0x3, 0x3, 0x1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0x00, 0x00, 0xf0, 0xf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x1, 0x3, 0x87, 0x7f, 0x1f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0xff, 0x3f, 0x3f, 0x5f, 0x9f, 0x1f, 0xf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfb, 0xf9, 0xfd, 0xfe, 0xfe, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0xbf, 0xbf, 0xbf, 0xbf, 0xdf, 0xdf, 0xdf, 0x4f, 0x6f, 0x77, 0x33, 0x3b, 0x1d, 0x1e, 0xe, 0xe, 0x7, 0x3, 0x1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2, 0x3, 0x00, 0x00, 0x18, 0x7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc, 0x7, 0x00, 0x40, 0x70, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7, 0x38, 0xc0, 0x00, 0x1, 0xe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x7f, 0x87, 0xf8, 0xff, 0xff, 0x1f, 0x3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1, 0x1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x77, 0x33, 0x1d, 0x1e, 0x7, 0x3, 0x1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};
const unsigned char foot[] PROGMEM  = {
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xfc, 0xff, 0xfe, 0xfc, 0xfd, 0xfd, 0xfd, 0xfd, 0xfd, 0xfc, 0xff, 0xfe, 0xe6, 0xe6, 0xf2, 0x98, 0x88, 0xe0, 0x60, 0x60, 0x20, 0xc0, 0xc0, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x78, 0xff, 0xe7, 0xcf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xde, 0xde, 0xdf, 0xd9, 0xd8, 0xde, 0xdf, 0xdf, 0xcf, 0x6e, 0x3c, 
};
const unsigned char queen[] PROGMEM  = {
  0x30, 0x70, 0xe0, 0x78, 0xf4, 0x6c, 0xf0, 0x70, 
};

void setup() {

  // start arduboy
  arduboy.begin();

  // serial connection for debugging
  Serial.begin(9600);

  // seed the random number generator
  arduboy.initRandomSeed();
  
  // set the frame rate to 60 FPS
  arduboy.setFrameRate(60);
  
  // clear the screen
  arduboy.clear();

}

void loop() {
  
  // prevent the game from running too fast (i.e. if not ready to display next frame, wait)
  if (!arduboy.nextFrame()) {
    return;
  }

  // clear the display
  arduboy.clear();

  // game code here
  switch(gamestate) {
    case 0:
      // title screen
      title();
      break;
    case 1:
      // game screen
      gameplay();
      break;
    case 2:
      // win screen
      win();
      break;
    case 3:
      // lose screen
      lose();
      break;
  }

  // reset variables for button presses
  resetbuttonbuffers();

  // update the display
  arduboy.display();

}

void title () {

  arduboy.drawBitmap(0, 0, titlescreen, 128, 64, WHITE);
  
  arduboy.setCursor(24, 52);
  arduboy.print("> Press A to play");
  if(arduboy.pressed(A_BUTTON) and bufferA == 0) {
    bufferA = 1;
    gamestate = 1;
  }
  
}

void gameplay() {

  twoPlayer = true;
  
  printScore();

  checkScore();
  
  footUpDown();

  // draw floor
  for( int x = 0; x < 128; x = x + 2 ) {
    arduboy.fillRect(x, 52, 1, 1, WHITE);
  }
  for( int x = 1; x <= 127; x = x + 2 ) {
    arduboy.fillRect(x, 53, 1, 1, WHITE);
  }
  
  // draw player foot
  arduboy.drawBitmap(footX, footY, foot, footWidth, footHeight, WHITE);
  // 2 player
  if (twoPlayer == true) {
    arduboy.drawBitmap(p2_footX, p2_footY, foot, footWidth, footHeight, WHITE);
  }
  

  // generate next wave of ants
  if (waveGenerated == false) {
    // increment the wave number
    waveNumber++;
    // random number of ants
    numberOfAnts = random(10, 50);
    // array of ant speeds
    int antSpeedArray[10] { 1, 2, 2, 2, 2, 3, 3, 3, 3, 4 }; // 10% chance of 1 and 4, 40% chance of 2 or 3
    // random index from array of ant speeds    
    antSpeed = antSpeedArray[random(0, 10)];
    // random spacing
    antSpacing = random(12, 20);
    // stop until next needed
    waveGenerated = true;
    // set antsSpawned to false
    antsSpawned == false;
//    // debug
//    Serial.print("Wave Generated");
//    Serial.print("\n");
//    Serial.print("numberOfAnts: ");
//    Serial.print(numberOfAnts);
//    Serial.print("\n");
  }

  // spawn ants

  if (antsSpawned == false) {
    // array of ant sizes
    int antSizeArray[10] { 2, 2, 2, 2, 2, 2, 2, 2, 2, 8 }; // 8 = queen ant
    for ( currentAnt = 0; currentAnt < numberOfAnts; currentAnt++ ) {
      Ants[currentAnt].antSize = antSizeArray[random(0, 10)]; // random key from ant size array
      Ants[currentAnt].antX = spawnX + (currentAnt*antSpacing) + Ants[currentAnt].antSize; // horizontal offset for spawing + random number
      Ants[currentAnt].antY = spawnY;
      Ants[currentAnt].alive = true;
    }
    antsSpawned = true; // stop them spawning again
  }
  
  // for each Ant in Ants
  for (currentAnt = 0; currentAnt < numberOfAnts; currentAnt++) {
    // if the ants are alive
    if (Ants[currentAnt].alive == true) {
      moveAnts(); // move to the right
      escapedAnts(); // score if ants escape
      crushedAnts(); // score if ants are crushed
      // draw ants
      if (Ants[currentAnt].antSize <= 7){
        arduboy.fillRect(Ants[currentAnt].antX - Ants[currentAnt].antSize, Ants[currentAnt].antY - Ants[currentAnt].antSize, Ants[currentAnt].antSize, Ants[currentAnt].antSize, WHITE);
      }
      // draw queens
      if (Ants[currentAnt].antSize == 8){
        arduboy.drawBitmap(Ants[currentAnt].antX - Ants[currentAnt].antSize, Ants[currentAnt].antY - Ants[currentAnt].antSize, queen, Ants[currentAnt].antSize, Ants[currentAnt].antSize, WHITE);
      }
    }
  }
  
}

void checkScore() {

  // if all the ants are dead...
  if ((waveAntsCrushed + waveAntsLost) == numberOfAnts) {
    // spawn a new wave
    waveAntsCrushed = 0;
    waveAntsLost = 0;
    waveGenerated = false;
    antsSpawned = false;
  }

//  // if there have been more than 5 waves...
//  if (waveNumber > 5) {
//    // win the game (for now)
//    gamestate = 2; // win    
//  }
  
//  if (waveAntsCrushed >= numberOfAnts) {
//    gamestate = 2; // win
//  }
//  if (waveAntsLost >= numberOfAnts) {
//    gamestate = 3; // lose
//  }
}

void printScore() {
  
  if (twoPlayer == false) {
    arduboy.setCursor(4,56);
    arduboy.print("Points: ");
    arduboy.print(totalAntsCrushed);
  }

  if (twoPlayer == true) {
    // 1st player score
    arduboy.setCursor(4,56);
    arduboy.print("P1: ");
    arduboy.print(totalAntsCrushed);
    // 2nd player score
    arduboy.setCursor(64,56);
    arduboy.print("P2: ");
    arduboy.print(p2_totalAntsCrushed);
  }
  
}

void footUpDown() {
  
  // if the foot is at the top of the screen...
  if (footY == footHighPoint) {
    footRaising = false;
    footRaised = true;
  }

  // if the foot is raised...
  if (footRaised == true) {
    // if A is pressed..
    if(arduboy.pressed(DOWN_BUTTON) and bufferDown == 0) {
      bufferDown = 1;
      footLowering = true;
      footRaised = false;
    }
  }

  // if foot is lowering, and not at the bottom of the screen...
  if (footLowering == true and footY < footLowPoint) {
    // move the foot down
    footY = footY + 2;  
  }

  // if foot is at the bottom of the screen...
  if (footY == footLowPoint) {
    // stop foot lowering
    footLowering = false;
    // start foot raising
    footRaising = true;
  }

  // if foot is raising, and not at the top of the screen...
  if (footRaising == true and footY > footHighPoint) {
    footY = footY - 1;
  }

  // 2 player
  if (twoPlayer == true) {
    // if the foot is at the top of the screen...
    if (p2_footY == footHighPoint) {
      p2_footRaising = false;
      p2_footRaised = true;
    }
  
    // if the foot is raised...
    if (p2_footRaised == true) {
      // if A is pressed..
      if(arduboy.pressed(A_BUTTON) and bufferA == 0) {
        bufferA = 1;
        p2_footLowering = true;
        p2_footRaised = false;
      }
    }
  
    // if foot is lowering, and not at the bottom of the screen...
    if (p2_footLowering == true and p2_footY < footLowPoint) {
      // move the foot down
      p2_footY = p2_footY + 2;  
    }
  
    // if foot is at the bottom of the screen...
    if (p2_footY == footLowPoint) {
      // stop foot lowering
      p2_footLowering = false;
      // start foot raising
      p2_footRaising = true;
    }
  
    // if foot is raising, and not at the top of the screen...
    if (p2_footRaising == true and p2_footY > footHighPoint) {
      p2_footY = p2_footY - 1;
    }
  }
  
}

void moveAnts() {
//  Ants[currentAnt].antX = Ants[currentAnt].antX - 2; 
  Ants[currentAnt].antX = Ants[currentAnt].antX - antSpeed; 
}

void escapedAnts() {
  // if ant is offscreen
  if (Ants[currentAnt].antX <= 0) {
   // increment wave ants lost
   waveAntsLost++;
   // increment total ants list 
   totalAntsLost++;
   // kill the ant
   Ants[currentAnt].alive = false;
  }
}

void crushedAnts() {
  // if player foot is down
  if (footY == footLowPoint or footY == footLowPoint -1) {
    // if ant is under foot
    if ((Ants[currentAnt].antX >= footX and Ants[currentAnt].antX <= footX + footWidth) or (Ants[currentAnt].antX + Ants[currentAnt].antSize >= footX and Ants[currentAnt].antX + Ants[currentAnt].antSize <= footX + footWidth)) {
      // increment wave ants crushed
      waveAntsCrushed++;
      // increment total ants crushed
      if (Ants[currentAnt].antSize <= 7){
        // one point for regular ants 
        totalAntsCrushed++;
      }
      // draw queens
      if (Ants[currentAnt].antSize == 8){
        // 20 points for queens
        totalAntsCrushed = totalAntsCrushed + 20;
      }
      // kill the ant
      Ants[currentAnt].alive = false;
    }
  }

  if (twoPlayer == true) {
      // if player foot is down
      if (p2_footY == footLowPoint or p2_footY == footLowPoint -1) {
        // if ant is under foot
        if ((Ants[currentAnt].antX >= p2_footX and Ants[currentAnt].antX <= p2_footX + footWidth) or (Ants[currentAnt].antX + Ants[currentAnt].antSize >= p2_footX and Ants[currentAnt].antX + Ants[currentAnt].antSize <= p2_footX + footWidth)) {
          // increment wave ants crushed
          waveAntsCrushed++;
          // increment total ants crushed
          if (Ants[currentAnt].antSize <= 7){
            // one point for regular ants 
            p2_totalAntsCrushed++;
          }
          // draw queens
          if (Ants[currentAnt].antSize == 8){
            // 20 points for queens
            p2_totalAntsCrushed = p2_totalAntsCrushed + 20;
          }
          // kill the ant
          Ants[currentAnt].alive = false;
        }
      }
  }
  
}

void win() {
  arduboy.setCursor(0, 0);
  arduboy.print("You crushed them!");
  arduboy.setCursor(0, 16);
  arduboy.print("Press B to play again.");
  // press B to reset
  if(arduboy.pressed(B_BUTTON) and bufferB == 0) {
    bufferB = 1;
    resetgame();
    gamestate = 0;
  }
}

void lose() {
  arduboy.setCursor(0, 0);
  arduboy.print("Too many escaped!");
  arduboy.setCursor(0, 16);
  arduboy.print("Press B to try again.");
  // press B to reset
  if(arduboy.pressed(B_BUTTON) and bufferB == 0) {
    bufferB = 1;
    resetgame();
    gamestate = 0;
  }
}

void resetgame() {
  // ants
  antsSpawned = false;
  // scoring
  waveAntsCrushed = 0;
  waveAntsLost = 0;
  // player
  footX = 50;
  footY = -20;
  waveGenerated = false;
}

void resetbuttonbuffers() {
  // reset buffer state
  if (arduboy.notPressed(A_BUTTON)) {
    bufferA = 0;
  }
  if (arduboy.notPressed(B_BUTTON)) {
    bufferB = 0;
  }
  if (arduboy.notPressed(UP_BUTTON)) {
    bufferUp = 0;
  }
  if (arduboy.notPressed(DOWN_BUTTON)) {
    bufferDown = 0;
  }
  if (arduboy.notPressed(LEFT_BUTTON)) {
    bufferLeft = 0;
  }
  if (arduboy.notPressed(RIGHT_BUTTON)) {
    bufferRight = 0;
  }
}
