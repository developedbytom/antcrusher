// Tom Bedford (oldmantom)
// July 26th 2017
// Ants

#include <Arduboy2.h>
Arduboy2 arduboy;

// gamestates
int gamestate = 0;
int gametype = 0;

// resolution
int screenWidth = 128;
int screenHeight = 64;

// button press buffers
int bufferA = 0;
int bufferB = 0;
int bufferUp = 0;
int bufferDown = 0;
int bufferLeft = 0;
int bufferRight = 0;

// spawner
int spawnX = screenWidth;
int spawnY = screenHeight;

// ants
bool antsSpawned = false;
int antSize = 2;
class Ant {
  public:
    int antX;
    int antY;
    bool alive = true;
};
int currentAnt;
int numberOfAnts = 10;
Ant Ants[10]; // prepare array of ants

// scoring
int playerScore;
int computerScore;

// player
int footX = 50;
int footY = -20;
int footWidth = 32;
int footHeight = screenHeight;
bool footRaised = true;
bool footLowering = false;
bool footRaising = false;

// images
const unsigned char titlescreen[] PROGMEM  = {
  0xff, 0xff, 0xff, 0xfe, 0xfc, 0xf8, 0xf0, 0x20, 0x00, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0xc0, 0xc0, 0xe0, 0xf0, 0xf0, 0xf8, 0xf8, 0xf8, 0xf8, 0xf0, 0xe0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xf0, 0xea, 0xf0, 0xfc, 0xff, 0x38, 0x51, 0xf, 0x1, 0x9e, 0xce, 0xe4, 0x68, 0x3c, 0x28, 0x8, 0x70, 0x90, 0xc0, 0x30, 0x30, 0x00, 0x70, 0xb0, 0xd0, 0x60, 0x30, 0x00, 0x18, 0x98, 0xc8, 0xe0, 0x10, 0x4, 0x3c, 0xfe, 0xfe, 0xff, 0xf8, 0x7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xbf, 0xbf, 0xc7, 0xf9, 0xfc, 0xfc, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3, 0x1c, 0xe0, 0x80, 0xc0, 0x60, 0x30, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfd, 0xfd, 0xfe, 0xff, 0xff, 0xff, 0xfc, 0xfd, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0xfc, 0xf8, 0xfc, 0xfe, 0xff, 0xff, 0xfe, 0xfd, 0x7e, 0xbf, 0xbf, 0x9f, 0xdf, 0xee, 0xee, 0xef, 0xf7, 0xf7, 0xf9, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xbf, 0xdf, 0xdf, 0xef, 0xf7, 0x79, 0x3e, 0x1f, 0x1f, 0xf, 0x7, 0x3, 0x1, 0x1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x38, 0x3e, 0x7f, 0x7f, 0x7c, 0x7e, 0xf2, 0xf2, 0xff, 0xef, 0xe7, 0xc0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x18, 0x84, 0x5c, 0xe0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xbf, 0xbf, 0xdf, 0xdf, 0xef, 0xf7, 0xfb, 0xfb, 0xfd, 0xfd, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0xbf, 0xcf, 0xf7, 0x77, 0x3b, 0x3d, 0x1d, 0xe, 0xe, 0x7, 0x3, 0x1, 0x1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x3b, 0x1f, 0xf, 0xff, 0x3f, 0x3f, 0x3f, 0x7f, 0x7c, 0xfc, 0xfc, 0xfc, 0xf8, 0xfe, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfc, 0xff, 0xfe, 0xf0, 0xe0, 0xc0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xbf, 0xdf, 0xdf, 0xef, 0xe7, 0xf7, 0xfb, 0xf9, 0xfd, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xbf, 0xdf, 0xdf, 0x6f, 0x77, 0x3b, 0x1d, 0x1d, 0xe, 0x7, 0x3, 0x3, 0x1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0x00, 0x00, 0xf0, 0xf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x1, 0x3, 0x87, 0x7f, 0x1f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0xff, 0x3f, 0x3f, 0x5f, 0x9f, 0x1f, 0xf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfb, 0xf9, 0xfd, 0xfe, 0xfe, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0xbf, 0xbf, 0xbf, 0xbf, 0xdf, 0xdf, 0xdf, 0x4f, 0x6f, 0x77, 0x33, 0x3b, 0x1d, 0x1e, 0xe, 0xe, 0x7, 0x3, 0x1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2, 0x3, 0x00, 0x00, 0x18, 0x7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc, 0x7, 0x00, 0x40, 0x70, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7, 0x38, 0xc0, 0x00, 0x1, 0xe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x7f, 0x87, 0xf8, 0xff, 0xff, 0x1f, 0x3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1, 0x1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x77, 0x33, 0x1d, 0x1e, 0x7, 0x3, 0x1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};
const unsigned char foot[] PROGMEM  = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
};

void setup() {

  // start arduboy
  arduboy.begin();

  // set the frame rate to 60 FPS
  arduboy.setFrameRate(60);
  
  // clear the screen
  arduboy.clear();

}

void loop() {

  // prevent the game from running too fast (i.e. if not ready to display next frame, wait)
  if (!arduboy.nextFrame()) {
    return;
  }

  // clear the display
  arduboy.clear();

  // game code here
  switch(gamestate) {
    case 0:
      // title screen
      title();
      break;
    case 1:
      // game screen
      gameplay();
      break;
    case 2:
      // win screen
      win();
      break;
    case 3:
      // lose screen
      lose();
      break;
  }

  // reset variables for button presses
  resetbuttonbuffers();

  // update the display
  arduboy.display();

}

void title () {

  arduboy.drawBitmap(0, 0, titlescreen, 128, 64, WHITE);
  
//  arduboy.setCursor(0, 0);
//  arduboy.print("ANT CRUSHER");
//  arduboy.setCursor(0, 16);
//  arduboy.print("Crush 10 ants...");
//  arduboy.setCursor(0, 26);
//  arduboy.print("...before 20 escape!");
  
  arduboy.setCursor(24, 52);
  arduboy.print("> Press A to play");
  if(arduboy.pressed(A_BUTTON) and bufferA == 0) {
    bufferA = 1;
    gamestate = 1;
  }
  
}

void gameplay() {
  
  printScore();

  checkScore();

  footUpDown();

  // draw player foot
  //  arduboy.fillRect(footX, footY, footWidth, footHeight, WHITE);
  arduboy.drawBitmap(footX, footY, foot, footWidth, footHeight, WHITE);

  // set Ant spawn coordinates
  if (antsSpawned == false) {
    for ( currentAnt = 0; currentAnt < numberOfAnts; currentAnt++ ) {
      Ants[currentAnt].antX = spawnX + (currentAnt*10); // spawn ants 10px apart
      Ants[currentAnt].antY = spawnY;
    }
    antsSpawned = true; // stop them spawning again
  }
  
  // for each Ant in Ants
  for (currentAnt = 0; currentAnt < numberOfAnts; currentAnt++) {
    // if the ants are alive
    if (Ants[currentAnt].alive == true) {
      moveAnts(); // move to the right
      escapedAnts(); // score if ants escape
      crushedAnts(); // score if ants are crushed
      // draw ants
      arduboy.fillRect(Ants[currentAnt].antX - antSize, Ants[currentAnt].antY - antSize, antSize, antSize, WHITE);
    }
  }
  
}

void checkScore() {
  if (playerScore >= numberOfAnts) {
    gamestate = 2; // win
  }
  if (computerScore >= 20) {
    gamestate = 3; // lose
  }
}

void printScore() {
  // computer score
  arduboy.setCursor(0,0);
  arduboy.print(computerScore);
  arduboy.print(" Lost");
  // player score
  arduboy.setCursor(68,0);
  arduboy.print(playerScore);
  arduboy.print(" Crushed");
}

void footUpDown() {

  // if the foot is raised
  if (footRaised == true) {
    // if A is pressed..
    if(arduboy.pressed(A_BUTTON) and bufferA == 0) {
      bufferA = 1;
      footLowering = true;
      footRaised = false;
    }
  }

  // if foot is lowering, and not at the bottom of the screen...
  if (footLowering == true and footY < 0) {
    // move the foot down
    footY = footY + 2;  
  }

  // if foot is at the bottom of the screen...
  if (footY == 0) {
    // stop foot lowering
    footLowering = false;
    // start foot raising
    footRaising = true;
  }

  // if foot is raising, and not at the top of the screen...
  if (footRaising == true and footY > -20) {
    footY = footY - 1;
  }

  // if the foot is at the top of the screen...
  if (footY == -20) {
    footRaising = false;
    footRaised = true;
  }
  
}

void moveAnts() {
  Ants[currentAnt].antX = Ants[currentAnt].antX - 2; 
}

void escapedAnts() {
  // if ant is offscreen
  if (Ants[currentAnt].antX <= 0) {
   // increment computer score
   computerScore++;
   // respawn ant
   Ants[currentAnt].antX = spawnX;
  }
}

void crushedAnts() {
  // if player foot is down
  if (footY == -1) {
    // if ant is under foot
    if (Ants[currentAnt].antX >= footX and Ants[currentAnt].antX <= footX + footWidth) {
      // increment player score
      playerScore++;
      // kill the ant
      Ants[currentAnt].alive = false;
    }
  }
}

void win() {
  arduboy.setCursor(0, 0);
  arduboy.print("You crushed them!");
  arduboy.setCursor(0, 16);
  arduboy.print("Press B to play again.");
  // press B to reset
  if(arduboy.pressed(B_BUTTON) and bufferB == 0) {
    bufferB = 1;
    resetgame();
    gamestate = 0;
  }
}

void lose() {
  arduboy.setCursor(0, 0);
  arduboy.print("Too many escaped!");
  arduboy.setCursor(0, 16);
  arduboy.print("Press B to try again.");
  // press B to reset
  if(arduboy.pressed(B_BUTTON) and bufferB == 0) {
    bufferB = 1;
    resetgame();
    gamestate = 0;
  }
}

void resetgame() {
  // ants
  antsSpawned = false;
  for ( int i = 0; i < numberOfAnts; i++ ) {
    Ants[i].alive = true;
  }
  numberOfAnts = 10;
  // scoring
  playerScore = 0;
  computerScore = 0;
  // player
  footX = 50;
  footY = -20;
  footRaised = true;
  footLowering = false;
  footRaising = false;
}

void resetbuttonbuffers() {
  // reset buffer state
  if (arduboy.notPressed(A_BUTTON)) {
    bufferA = 0;
  }
  if (arduboy.notPressed(B_BUTTON)) {
    bufferB = 0;
  }
  if (arduboy.notPressed(UP_BUTTON)) {
    bufferUp = 0;
  }
  if (arduboy.notPressed(DOWN_BUTTON)) {
    bufferDown = 0;
  }
  if (arduboy.notPressed(LEFT_BUTTON)) {
    bufferLeft = 0;
  }
  if (arduboy.notPressed(RIGHT_BUTTON)) {
    bufferRight = 0;
  }
}
